import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as a,a as t,d as i,e as l,f as d,r as o,o as h}from"./app-B7KLoWbQ.js";const p={};function c(k,e){const s=o("RouteLink");return h(),r("div",null,[e[6]||(e[6]=a('<h2 id="_1-基础用法" tabindex="-1"><a class="header-anchor" href="#_1-基础用法"><span>1.基础用法</span></a></h2><p>状态表达式(states) ，是一个文本（字符串），因此它的值使用双引号包围。例如</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[前台-击破]&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>状态表达式的作用，顾名思义，就是用于表达判断当前游戏状态的。</p><p>而表达式的格式，是一条龙里自定义的，所以在外面会搜索不到。</p><h3 id="_1-1-一个状态" tabindex="-1"><a class="header-anchor" href="#_1-1-一个状态"><span>1.1.一个状态</span></a></h3><p>我们需要使用 <code>中括号 []</code> 来包围我们需要表达的状态。</p><p>在自动战斗时，脚本会帮你识别很多的状态，你只需要挑选你需要用的来填写表达式即可。</p>',8)),t("p",null,[e[1]||(e[1]=i("完整可用的状态见 ")),l(s,{to:"/zzz/zh/auto_battle_guide/basic/basic_90_states_enum.html"},{default:d(()=>e[0]||(e[0]=[i("状态枚举")])),_:1})]),e[7]||(e[7]=a('<p>上述例子中，表达式就是单纯判断前台角色是否击破，如果脚本有识别到这个状态，那么表达式的结果就为<code>真</code>，脚本会执行对应的操作。</p><h3 id="_1-2-多个状态" tabindex="-1"><a class="header-anchor" href="#_1-2-多个状态"><span>1.2.多个状态</span></a></h3><p>如果想组合多个状态来做判断，也是可以支持的。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;![前台-击破] &amp; [后台-1-击破]&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述例子中，表达的意思是 前台角色不是击破 而且 后台第2个角色是击破。</p><p>状态表达式支持运算符 <code>&amp;</code>(且), <code>|</code>(或), <code>!</code>(否), <code>()</code>(括号)。</p><p><code>&amp;</code> 和 <code>|</code> 没有运算优先级，运算先后顺序需要使用 <code>()</code> 保证。</p><details><summary>更多例子</summary><h5 id="例子1" tabindex="-1"><a class="header-anchor" href="#例子1"><span>例子1</span></a></h5><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[闪避识别-黄光] &amp; [后台-2-强攻]&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>识别到 <code>闪避识别-黄光</code> 且后台第二个角色是强攻，可以考虑让强攻角色格挡。</p><h5 id="例子2" tabindex="-1"><a class="header-anchor" href="#例子2"><span>例子2</span></a></h5><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[按键-连携技-左] | [按键-连携技-右]&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>刚刚按键了连携技换人，可以考虑爆发。</p></details><h2 id="_2-状态识别时间" tabindex="-1"><a class="header-anchor" href="#_2-状态识别时间"><span>2.状态识别时间</span></a></h2><p>在自动战斗的过程中，脚本会持续进行游戏截图，监控游戏音频等，进而完成所需的状态识别。</p><p>所以，每个状态，其实都是有一个被识别到的时间，通常归为以下几类</p><ul><li>截图后识别的状态 - 识别时间=截图时间</li><li>脚本操作产生的状态 - 脚本的按键完成时间</li></ul>',12)),t("p",null,[e[3]||(e[3]=i("具体各个状态的识别时间，可以见 ")),l(s,{to:"/zzz/zh/auto_battle_guide/basic/basic_90_states_enum.html"},{default:d(()=>e[2]||(e[2]=[i("状态枚举")])),_:1})]),e[8]||(e[8]=a('<h3 id="_2-1-表达式使用时间" tabindex="-1"><a class="header-anchor" href="#_2-1-表达式使用时间"><span>2.1.表达式使用时间</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[按键-连携技-左, 0, 12] | [按键-连携技-右, 0, 12]&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述表达式是想判断，当前是否在 脚本执行 <code>按键-连携技-左</code> 的 0~12秒内 或者 脚本执行 <code>按键-连携技-右</code> 的 0~12秒内。</p><p>通常，我们使用这个方式来粗略表达怪物失衡的时期。</p><p>所以，状态表达式里，中括号里的内容，可以使用英文逗号分割，包含了2部分：</p><ul><li>状态名称 - 中括号里第1个英文逗号前的内容，上述例子的 <code>按键-连携技-左</code> 和 <code>按键-连携技-右</code>，代表当前需要判断的状态。</li><li>状态出现的时间范围 - 中括号里第2,3个数字，上述例子的 <code>0</code> 和 <code>12</code>，代表上一次出现这个状态的时间(识别时间)，距离现在过去的时间(秒数)，是否在后续2个数字(包含)的范围内。</li><li>时间范围默认值 - 当表达式中不包含第2,3个数字，即<code>1.基础用法</code>里的例子，则默认使用 <code>0,1</code> 进行判断。</li></ul><h2 id="_3-状态值判断" tabindex="-1"><a class="header-anchor" href="#_3-状态值判断"><span>3.状态值判断</span></a></h2><p>部分的状态，是会有数值的概念的，例如</p><ul><li>前台-能量 - 是0~120</li><li>青衣-电压 - 是0~100</li><li>朱鸢-子弹数 - 是0~9</li></ul><p>在状态表达式中，我们需要使用以下方式来判断状态的数值</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[朱鸢-子弹数]{7, 9}&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们在中括号后紧接着 <code>大括号{}</code> + 两个数字 来判断，当前的子弹数，是否在 7~9 之间(包含)。这时候就是子弹容易溢出，先打子弹再用强化特殊技或者爆发技。</p>',12)),t("p",null,[e[5]||(e[5]=i("具体哪些状态拥有状态值，可以见 ")),l(s,{to:"/zzz/zh/auto_battle_guide/basic/basic_90_states_enum.html"},{default:d(()=>e[4]||(e[4]=[i("状态枚举")])),_:1})])])}const g=n(p,[["render",c],["__file","basic_05_states.html.vue"]]),b=JSON.parse('{"path":"/zzz/zh/auto_battle_guide/basic/basic_05_states.html","title":"基础-05-状态表达式","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"基础-05-状态表达式","description":"1.基础用法 状态表达式(states) ，是一个文本（字符串），因此它的值使用双引号包围。例如 状态表达式的作用，顾名思义，就是用于表达判断当前游戏状态的。 而表达式的格式，是一条龙里自定义的，所以在外面会搜索不到。 1.1.一个状态 我们需要使用 中括号 [] 来包围我们需要表达的状态。 在自动战斗时，脚本会帮你识别很多的状态，你只需要挑选你需要用...","head":[["meta",{"property":"og:url","content":"https://one-dragon.org/zzz/zh/auto_battle_guide/basic/basic_05_states.html"}],["meta",{"property":"og:site_name","content":"一条龙小助手"}],["meta",{"property":"og:title","content":"基础-05-状态表达式"}],["meta",{"property":"og:description","content":"1.基础用法 状态表达式(states) ，是一个文本（字符串），因此它的值使用双引号包围。例如 状态表达式的作用，顾名思义，就是用于表达判断当前游戏状态的。 而表达式的格式，是一条龙里自定义的，所以在外面会搜索不到。 1.1.一个状态 我们需要使用 中括号 [] 来包围我们需要表达的状态。 在自动战斗时，脚本会帮你识别很多的状态，你只需要挑选你需要用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-09T03:51:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-09T03:51:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础-05-状态表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-09T03:51:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DoctorReid\\",\\"url\\":\\"https://one-dragon.org\\"}]}"]]},"headers":[{"level":2,"title":"1.基础用法","slug":"_1-基础用法","link":"#_1-基础用法","children":[{"level":3,"title":"1.1.一个状态","slug":"_1-1-一个状态","link":"#_1-1-一个状态","children":[]},{"level":3,"title":"1.2.多个状态","slug":"_1-2-多个状态","link":"#_1-2-多个状态","children":[]}]},{"level":2,"title":"2.状态识别时间","slug":"_2-状态识别时间","link":"#_2-状态识别时间","children":[{"level":3,"title":"2.1.表达式使用时间","slug":"_2-1-表达式使用时间","link":"#_2-1-表达式使用时间","children":[]}]},{"level":2,"title":"3.状态值判断","slug":"_3-状态值判断","link":"#_3-状态值判断","children":[]}],"git":{"createdTime":1727584039000,"updatedTime":1728445878000,"contributors":[{"name":"DoctorReid","username":"DoctorReid","email":"doctorreid2024@outlook.com","commits":3,"url":"https://github.com/DoctorReid"}]},"readingTime":{"minutes":3.32,"words":996},"filePathRelative":"zzz/zh/auto_battle_guide/basic/basic_05_states.md","localizedDate":"2024年9月29日","autoDesc":true}');export{g as comp,b as data};
