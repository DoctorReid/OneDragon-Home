import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as t,a as e,d as i,e as l,f as n,r,o}from"./app-B7KLoWbQ.js";const p={};function k(c,s){const a=r("RouteLink");return o(),h("div",null,[s[6]||(s[6]=t('<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1.简介</span></a></h2><p>每个<code>场景</code>(scenes里的元素) 下，都会包含一个 <code>处理方法数组(handlers)</code>。</p><p>每一个 <code>处理方法</code>，会包含以下属性</p><ul><li>states <code>状态表达式</code> - 在这个场景下，判断当前是什么状态。</li><li>operations <code>操作指令数组</code> - 在这个状态下，需要进行的具体操作。</li><li>sub_handlers <code>子处理方法数组</code> - 在这个状态下，尽一步细分对应的处理方法。</li></ul><h2 id="_2-状态表达式" tabindex="-1"><a class="header-anchor" href="#_2-状态表达式"><span>2.状态表达式</span></a></h2>',5)),e("p",null,[s[1]||(s[1]=i("戳 ")),l(a,{to:"/zzz/zh/auto_battle_guide/basic/basic_05_states.html"},{default:n(()=>s[0]||(s[0]=[i("这里")])),_:1}),s[2]||(s[2]=i(" 了解"))]),s[7]||(s[7]=e("h2",{id:"_3-操作指令数组",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-操作指令数组"},[e("span",null,"3.操作指令数组")])],-1)),e("p",null,[s[4]||(s[4]=i("戳 ")),l(a,{to:"/zzz/zh/auto_battle_guide/basic/basic_06_operations.html"},{default:n(()=>s[3]||(s[3]=[i("这里")])),_:1}),s[5]||(s[5]=i(" 了解"))]),s[8]||(s[8]=t(`<h2 id="_4-子处理方法数组" tabindex="-1"><a class="header-anchor" href="#_4-子处理方法数组"><span>4.子处理方法数组</span></a></h2><p>在 <code>状态表达式</code> 判断为真时，可以使用 <code>子处理方法数组(sub_handlers)</code> 进一步细分状态。</p><p>数组中的元素，都是一个 <code>处理方法</code>，也就是嵌套的结构。</p><p>这个用法主要是可以简化部分写法，观感上也会更直观。例如以下两种写法是等价的。</p><details><summary>例子</summary><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[闪避识别-黄光] &amp; [前台-击破]&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  operations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[闪避识别-黄光] &amp; [前台-强攻]&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  operations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[闪避识别-黄光]&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  sub_handlers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[前台-击破]&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      operations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">states</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[前台-强攻]&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      operations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>当然，如果觉得绕晕了，你可以保持使用第一种写法。</p><h2 id="_5-处理方法模版" tabindex="-1"><a class="header-anchor" href="#_5-处理方法模版"><span>5.处理方法模版</span></a></h2><p>未写</p><h2 id="_6-执行逻辑" tabindex="-1"><a class="header-anchor" href="#_6-执行逻辑"><span>6.执行逻辑</span></a></h2><p>命中某个场景时，脚本会按顺序，对场景中的每个<code>处理方法</code>的<code>状态表达式</code>进行判断</p><ul><li>1.0. 如果 <code>状态表达式(states)</code> 判断为真 <ul><li>1.1. 存在 <code>操作指令数组(operations)</code> ，则执行对应的操作指令。</li><li>1.2. 存在 <code>子处理方法数组(sub_handlers)</code>，则继续判断 <code>子处理方法数组(sub_handlers)</code> 的 <code>状态表达式(states)</code>，回到1.0步骤。</li></ul></li><li>2.0. 如果 <code>1.0</code> 部分无法找到完全满足(包括sub_handlers)的 <code>处理方法</code>，则继续判断下一个<code>处理方法</code>。</li></ul>`,11))])}const m=d(p,[["render",k],["__file","basic_04_handlers.html.vue"]]),b=JSON.parse('{"path":"/zzz/zh/auto_battle_guide/basic/basic_04_handlers.html","title":"基础-04-场景下的处理方法","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"基础-04-场景下的处理方法","description":"1.简介 每个场景(scenes里的元素) 下，都会包含一个 处理方法数组(handlers)。 每一个 处理方法，会包含以下属性 states 状态表达式 - 在这个场景下，判断当前是什么状态。 operations 操作指令数组 - 在这个状态下，需要进行的具体操作。 sub_handlers 子处理方法数组 - 在这个状态下，尽一步细分对应的处理...","head":[["meta",{"property":"og:url","content":"https://one-dragon.org/zzz/zh/auto_battle_guide/basic/basic_04_handlers.html"}],["meta",{"property":"og:site_name","content":"一条龙小助手"}],["meta",{"property":"og:title","content":"基础-04-场景下的处理方法"}],["meta",{"property":"og:description","content":"1.简介 每个场景(scenes里的元素) 下，都会包含一个 处理方法数组(handlers)。 每一个 处理方法，会包含以下属性 states 状态表达式 - 在这个场景下，判断当前是什么状态。 operations 操作指令数组 - 在这个状态下，需要进行的具体操作。 sub_handlers 子处理方法数组 - 在这个状态下，尽一步细分对应的处理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-09T03:51:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-09T03:51:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础-04-场景下的处理方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-09T03:51:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DoctorReid\\",\\"url\\":\\"https://one-dragon.org\\"}]}"]]},"headers":[{"level":2,"title":"1.简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2.状态表达式","slug":"_2-状态表达式","link":"#_2-状态表达式","children":[]},{"level":2,"title":"3.操作指令数组","slug":"_3-操作指令数组","link":"#_3-操作指令数组","children":[]},{"level":2,"title":"4.子处理方法数组","slug":"_4-子处理方法数组","link":"#_4-子处理方法数组","children":[]},{"level":2,"title":"5.处理方法模版","slug":"_5-处理方法模版","link":"#_5-处理方法模版","children":[]},{"level":2,"title":"6.执行逻辑","slug":"_6-执行逻辑","link":"#_6-执行逻辑","children":[]}],"git":{"createdTime":1727680792000,"updatedTime":1728445878000,"contributors":[{"name":"DoctorReid","username":"DoctorReid","email":"doctorreid2024@outlook.com","commits":2,"url":"https://github.com/DoctorReid"}]},"readingTime":{"minutes":1.57,"words":472},"filePathRelative":"zzz/zh/auto_battle_guide/basic/basic_04_handlers.md","localizedDate":"2024年9月30日","autoDesc":true}');export{m as comp,b as data};
